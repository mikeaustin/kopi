
wordcount string = string | split " " | reduce (counts, word) => (
  counts | update word, (x = 0) => count + 1
), {:}

match parseYesNo(response)
    case b is Bool       then "Got good answer"
    case e is ParseError then "Bad input"
end

match foobar
  (x, y): Point => "Point"
  Point (x, y)  => "Point"
end


employeeNames | sort (a, b) => a > b | map (name) => do
  name | split "," | map (name) => (name | strip) | reverse | join " "
end

employeeNames = ['a,b', 'c,d']

employeeNames.sort((a, b) => a > b).map(name => {
  return name.split(',').map(name => name.trim()).reverse().join(' ')
})


(x, k => (x, k => k x + 1) x + x, k) 5, (x => x)

map (i => map (j => i + j) i+1..5) 1..5

print 1 + 2, 2 + 3, 1..5 + 2

((() 5) 5) ++ "abc"

range = 1..10
range.from, range.to


'(x + x)

x = 0
f = () => update 'x z => z + 1
f ()
x


fix = f => (x => f (y => x x y)) x => f (y => x x y)

factorial = fix factorial => n => match n (
  0 => 1
  n => n * (factorial n - 1)
)

factorial 5


match 0 (
  0 => "zero"
  x => "other"
)


type 'Range (1, 10)

R = Range

R (1, 10)

Point = (x: Number, y: Number)

(1, y: 2)

1..5 | map '(+ 1)

'(if x * 5 then 0 else 1)

1..5 (x => x * x)

1..5 | map (x => x * x)


ul = props => children => "<ul>" ++ children ++ "</ul>"
li = props => children => "<li>" ++ children ++ "</li>"

ul (id: "foo", class: "bar") (1..5 x => li () ('toString x))
