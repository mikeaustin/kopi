fix = f => (x => f (y => x x y)) x => f (y => x x y)
fix (f => x => x * x) 5

print 1 + 2, 2 + 3, 1..5 + 2

2..1 (0-0.2) | map x => x, x + x

obj = (x => x + x), (x => x * x)

obj = add: (x => x + x), mul: (x => x * x)
obj.add 10
obj.mul 10

5..1 step: 0.5 | map x => x

double = x => x * x
1..5 step: 0.5 | map double

double x = x * x

1..3 | map x => (x..3 | map y => x, y)

flatMap


1..2 step: 0.5 | map x => (x..2 step: 0.5 | map y => x, y)

[(x, y) | x <- [1, 1.5..2], y <- [x, (x + 0.5)..2]]


[(1, 1), (1, 1.5), (1, 2), (1.5, 1.5), (1.5, 2), (2, 2)]

[(1.0,1.0),(1.0,1.5),(1.0,2.0),(1.5,1.5),(1.5,2.0),(2.0,2.0)]
