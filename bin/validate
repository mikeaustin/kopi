#!/usr/bin/env node

const util = require("util");
const fs = require("fs");
var readline = require('readline');

const parser = require("../lib/parser");
const { default: functions } = require('./functions');
const { Tuple, Range, Function } = require('./classes');

const { default: InterpreterVisitors } = require('./InterpreterVisitors');
const { default: PrintASTVisitors } = require('./PrintASTVisitors');

//

class InterpreterError extends Error { }

const visit = (visitors, node) => {
  if (visitors[node.constructor.name]) {
    return visitors[node.constructor.name](node);
  } else {
    throw new InterpreterError(`No AST visitor for '${node.constructor.name}'`);
  }
};

//

let buffer = '';
let inBlock = false;

if (process.argv.length === 3) {
  fs.readFile(process.argv[2], "utf8", (err, input) => {
    const ast = parser.parse(input);

    for (let statement of visit(new PrintASTVisitors(), ast)) {
      console.log(statement);
    }

    let prevNode = null;

    for (let node of ast.statements) {
      const formattedAst = util.inspect(node, {
        compact: false,
        depth: Infinity
      });

      if (typeof node === 'string' && typeof prevNode !== 'string') {
        console.log();
      }

      prevNode = node;

      // console.log(formattedAst);
    }
  });
} else {
  let scope = {
    ...functions,
    Number,
    String,
    Tuple,
    Range,
    Function
  };

  const visitors = new InterpreterVisitors();

  console.log('Kopi Language 0.0.1 | 2021 Mike Austin');

  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    completer: line => {
      if (line.endsWith('.')) {
        const ast = parser.parse(line.slice(0, line.length - 1));

        const result = visitors.visit(ast.statements[0], scope);

        // console.log(result);

        // const completions = '.help .error .exit .quit .q'.split(' ');
        const completions = Object.getOwnPropertyNames(result.value);

        // console.log('line', line);

        return [completions, line];
      }
    }
  });

  // process.stdin.setRawMode(true);

  rl.prompt();
  rl.on('line', function (line) {
    if (inBlock) {
      if (line.match(/^\)/)) {
        buffer += '\n' + line + '\n';

        inBlock = false;
      } else {
        buffer += '\n' + line;

        return;
      }
    } else if (line.match(/\($/)) {
      inBlock = true;
      buffer += line;

      return;
    } else {
      buffer = '\n' + line;
    }

    try {
      const ast = parser.parse(buffer);

      if (!inBlock) {
        buffer = '';
      }

      const result = visitors.visit(ast.statements[0], scope);

      if (result.value !== undefined) {
        console.log('=', result.value.inspect());
      }

      scope = { ...scope, ...result.scope };
    } catch (error) {
      console.log(error);
    }

    rl.prompt();
  });
}
