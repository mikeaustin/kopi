#!/usr/bin/env node

const util = require("util");
const fs = require("fs");
var readline = require('readline');

const parser = require("../lib/parser");

const { default: InterpreterVisitors } = require('./InterpreterVisitors');

const collect = (values, mapper) => {
  return values.reduce((array, item) => {
    const result = mapper(item);

    return result ? [...array, result] : array;
  }, []);
};

const visit = (visitors, node) => {
  if (visitors[node.constructor.name]) {
    return visitors[node.constructor.name](node);
  } else {
    throw new Error('No visitor for ' + node.constructor.name);
  }
};

const parens = (string) => {
  return `\x1b[37;2m(\x1b[0m${string}\x1b[37;2m)\x1b[0m`;
};

class Visitors {
  Comment({ value }) {
    return;
    return `# ${value}`;
  }

  Block({ statements }) {
    return collect(statements, statement => visit(this, statement));
  }

  ApplyExpression({ expr, args }) {
    return parens(`${visit(this, expr)} ${visit(this, args)}`);
  }

  TupleExpression({ elements }) {
    return parens(`${elements.map(value => visit(this, value)).join(', ')}`);
  }

  FunctionExpression({ params, statements }) {
    return parens(`${visit(this, params)} => ${collect(statements, statement => visit(this, statement))}`);
  }

  OperatorExpression({ op, left, right }) {
    return parens(`${visit(this, left)} ${op} ${visit(this, right)}`);
  }

  TuplePattern({ elements }) {
    return parens(`${elements.map(value => visit(this, value)).join(', ')}`);
  }

  Identifier({ name }) {
    return name;
  }
};

if (process.argv.length === 3) {
  fs.readFile(process.argv[2], "utf8", (err, input) => {
    const ast = parser.parse(input);

    for (let statement of visit(new Visitors(), ast)) {
      console.log(statement);
    }

    let prevNode = null;

    for (let node of ast.statements) {
      const formattedAst = util.inspect(node, {
        compact: false,
        depth: Infinity
      });

      if (typeof node === 'string' && typeof prevNode !== 'string') {
        console.log();
      }

      prevNode = node;

      // console.log(formattedAst);
    }
  });
} else {
  let scope = Object.create(null, {
    a: {
      value: 10
    }
  });

  const visitors = new InterpreterVisitors();

  console.log('Kopi Language 0.0.1 â€“ 2021 Mike Austin');

  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });


  rl.prompt();
  rl.on('line', function (line) {
    const ast = parser.parse(line);

    console.log(ast);

    try {
      console.log('=', visitors.visit(ast.statements[0], scope));
    } catch (error) {
      console.log(error);
    }

    rl.prompt();
  });
}
