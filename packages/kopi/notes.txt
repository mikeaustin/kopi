wordcount string = string | split " " | reduce (counts, word) => (
  counts | update word, (x = 0) => count + 1
), {:}

match foobar
  (x, y): Point => "Point"
  Point (x, y)  => "Point"
end

employeeNames = ['a,b', 'c,d']
employeeNames | sort (a, b) => a > b | map (name) => do
  name | split "," | map (name) => (name | strip) | reverse | join " "
end

Point = (x: Number, y: Number)

(1, y: 2)

ul (id: "foo", class: "bar") (
  1..5 | map (x) => (
    li () [text x]
  )
)


fold (a, x => x * x), 1..5
sort "julie" ++ "moronuki"
xs | reduce 0 sum, x => sum + x


match n (
  0 => 1
  n => n * n
  n @ even => n * n
)

1..10 | map (n @ even n) => n * n

1..10 | map (n) @ even n => n * n

1..10 | map (n @ n > x) => n * n


scheme cond case


grayscale = color => match color (
  RGB (r, g, b) => (r + g + b) / 3
  HSL (h, s, l) => l
)


[1 + 1, "a" ++ "b", even 1, x => x]

[
  even $ 1,
  1 | toString,
  "a" ++ "b",
  even 1,
  x => x,
  (1, 2),
  1 + 1,
  1..5
]


even = '(% 2 == 0)


print (1, 2, z: 3)
print (1, y: 2, z: 3)
print (x: 1, y: 2, z: 3)
print (1, y: 2, 3)
