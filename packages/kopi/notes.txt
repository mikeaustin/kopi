match foobar
  (x, y): Point => "Point"
  Point (x, y)  => "Point"
end

grayscale = color => match color (
  RGB (r, g, b) => (r + g + b) / 3
  HSL (h, s, l) => l
)


match age (
     1..18  => "child"
    19..100 => "adult"
)


Color = RGB (r: Int, g: Int, b: Int)

Color.RGB (100, 100, 255)


Point = T => type (x: T, y: T)


Move print to println?


File.read "notes.txt"

Net.fetch "https://google.com"


[ even $ 1,  1 | toString,  "a" ++ "b",  even 1,  x => x,  (1, 2),  1 + 1,  1..5 ]


$       LowPrecedenceApplyExpression
|       PipeExpression
1, 2    TupleExpression
++      ConcatinationExpression
1 == 1  EqualityExpression
1 + 1   AddExpression
1 * 1   MultiplyExpression
{}      BlockExpression
[1, 2]  ArrayExpression
{1: 2}  DictExpression
1..5    RangeExpression
v.x     MemberExpression
x => x  FunctionExpression


TypeVar type = Number | String

match<T, R>


x = match x (
  '(> 1) => 1
  '(< 0) => 0
  _      => x
)


Iterable	Symbol.iterator
Equatable	== !=
Comparable	compare < <= >= > min max clamp
Stringable	toStringAsync()
Serializable	
Enumerable	succ pred
Mappable	map
Numeric
Bounded		minBound, maxBound

Date.fromString

Read Show Eq Ord Enum Bounded


x^2 + y^2

map		filter zip
includes

every
some
exists
none

partition	split into two arrays

count
sort
group

take
drop

element, index = find (e) => e > 5

1..10 | splitBy (n) => even n
