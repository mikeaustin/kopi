print {:}

print $ { 1: "One", (1 + 1): "Two" }

print $ 1..2 | withIndex | map (n, index) => {
  (n): index
}

dict = { "One": 1, "Two": 2 } | map (key, value) => {
  value * value
}

print dict.("One")

dict = dict | set ("One", 3)

print $ dict | get "One"

print $ match dict.("Three") (
  ()    => 100
  value => value
)

dict = {:}
dict = dict | update "One" $ (x = 0) => x + 1
print dict

dict = dict | update "One" $ (x = 0) => x + 1
print dict

dict = dict | update "One" $ (x = 0) => x + 1
print dict

print ""

print $ "abcaba" | split "" | _reduce {:} $ (a, c) => {
  a | update c $ (n = 0) => n + 1
}

words = "abc def ghi abc def abc"
print $ words | split " " | _reduce {:} $ (counts, word) => (
  counts | update word $ (x = 0) => x + 1
)

print ""

print $ { 1: (2, 3) } == { 1: (2, 3) }

print { "class": "foo", "id": "bar" }
