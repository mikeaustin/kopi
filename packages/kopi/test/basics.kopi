print "== basics ========================================"
print ""

# Basic syntax and semantics tests

print $ max 1, 2

print $ ("first", "second").1

print $ (date ()), (time ())


print (
  (a, b => a + b) 2, 3
  2 * (3 + 4) + 1
  match 5 (0 => 1), (n => n * n)
)


print (
  1 == 1
  "x" == "x"
  (1, "x") == (1, "x")
  (1, (2, "y")) == (1, (2, "y"))
)

print (
  1 == 2
  "x" == "y"
  (1, "x") == (2, "x")
  (1, (2, "y")) == (1, (3, "y"))
)


print $ (x, k => (x, k => k x + 1) x + x, k) 5, (x => x)


fix = f => (x => f (y => x x y)) x => f (y => x x y)
factorial = fix factorial => n => match n (
  0 => 1
  n => n * (factorial n - 1)
)
print (factorial 170)


factorial = n => match n (
  0 => 1
  n => n * (factorial n - 1)
)
print (factorial 170)


print $ let (x = 2, y = 3) => x + y


(0, x => x) | getMatches 0, 1


vecA, vecB = (Vector 1, 2), (Vector 2, 3)
print (vecA + vecB | length | toFixed 3)


print $ 1..2, "a".."z" | map (a, b) => a, b

print $ 1..3 | map even

print $ 1..5 | map n => {
  x = n * n
  x
}

print $ 1..5 | map 'toString

print $ 1..5 | map '(* 2)


next = repeat (n) => n + 1

value, next = next ()
value, next = next ()

print value


print $ read "notes.txt" | length

print (
  fetch "https://google.com"
  fetch "https://google.jp"
)


print $ [1, (sleep 2), (1 + 2)] | xmap 'toString

sleep 1 | toFixed 3


x = loop exit => (x = 1) => {
  print x
  sleep 1
  match x (
    3 => exit ()
    n => n + 1
  )
}


print $ match 5 (
  x => x * x
)
