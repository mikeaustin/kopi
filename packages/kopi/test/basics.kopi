# Basic syntax and semantics tests

print $ max (1, 2)

print $ ("first", "second").1

print $ (date ()), (time ())

swap = a, b => b, a

print $ swap (1, 2)


print (
  (a, b => a + b) (2, 3)
  2 * (3 + 4) + 1
  match 5 ((0 => 1), (n => n * n))
)

print (
  (foo: 1, bar: 2).0 == (bar: 1, foo: 2).0
  (foo: 1, bar: 2).foo == (bar: 1, foo: 2).0
  (foo: 1, bar: 2).bar == (bar: 1, foo: 2).1
  (foo: 1, bar: 2).foo == (bar: 2, foo: 1).foo
)


print (
  1 == 1
  "x" == "x"
  (1, "x") == (1, "x")
  (1, (2, "y")) == (1, (2, "y"))
)

print (
  1 != 2
  "x" != "y"
  (1, "x") != (2, "x")
  (1, (2, "y")) != (1, (3, "y"))
)

print (
  2 > 1.5
  1.01 >= 1.01
  1.5 < 2
  1.01 <= 1.01
)


print $ (x, k => (x, k => k (x + 1)) (x + x, k)) (5, (x => x))


fix = f => (x => f (y => x x y)) x => f (y => x x y)
factorial = fix factorial => n => match n (
  0 => 1
  n => n * factorial (n - 1)
)
print $ factorial 170

factorial = n => match n (
  0 => 1
  n => n * factorial (n - 1)
)
print $ factorial 170

factorial = (n, accum = 1) => match n (
  0 => accum
  n => factorial (n - 1, n * accum)
)
print $ factorial (170, ())

factorial (n) = match n (
  0 => 1
  n => n * factorial (n - 1)
)

print $ factorial 170


print $ let (x = 2, y = 3) => x + y


(0, x => x) | getMatches (0, 1)


vecA, vecB = Vector [1, 2], Vector [2, 3]
print $ vecA + vecB | length | _toFixed 3


print $ 1..5 | reduce 1 $ (product, n) => product * n

print $ 1..4, "a".."z" | map (a, b) => a, b
print $ 1..2 | flatMap (n) => ("a".."b" | map (c) => (n, c))

print $ 1..3 | map even

print $ 1..5 | map n => {
  x = n * n
  x
}

print $ 1..5 | map '_toString

print $ 1..5 | map '(* 2)

print $ '_toString 5


next = repeat (n) => n + 1

value, next = next ()
value, next = next ()

print value


print $ read "notes.txt" | length

print $ fetch "http://mike-austin.com/example.html" | length

print $ match 5 (
  x => x * x
)


print $ [1, (sleep 2), (1 + 2)] | map '_toString

print $ sleep 1 | _toFixed 2

print $ loop exit => (x = 1) => {
  print x
  sleep 1
  match x (
    3 => exit 100
    n => n + 1
  )
}


print $ ["B, A", "D, C"] | map (name) => (
  name | split "," | map 'trim | reverse | join " "
)

f (x = 5) = x * x
print $ f ()


print $ ['(* 2), '(_toFixed 2)] | reduce 5 $ (x, f) => f x

pipe = fs => x => (fs | reduce x $ (x, f) => f x)
# pipe fs x = fs | reduce x $ (x, f) => f x

print $ pipe ['(* 2), '(_toFixed 2)] 5


print $ 1..100 | map (n) => match (n % 3, n % 5) (
  0, 0 => "FizzBuzz"
  0, _ => "Fizz"
  _, 0 => "Buzz"
  _    => n
)


grayscale (:r, :g, :b) = (r + g + b) / 3

print $ grayscale (r: 1, g: 2, b: 3)
