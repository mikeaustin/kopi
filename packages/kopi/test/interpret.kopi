print ""
print "== interpret ====================================="
print ""

evaluate = (statement) => match statement (
  line, "PRINT", value => print $ value
  line, "GOTO", goto   => print $ "GOTO " ++ goto ++ ": NOT IMPLEMENTED"
  line, command        => print $ "*** UNKNOWN COMMAND '" ++ command ++ "' ON LINE " ++ line
)

print $ ['(* 2), '(toFixed 2)] | _reduce 5 $ (x, f) => f x

pipe = fs => x => fs | _reduce x $ (x, f) => f x

print $ pipe ['(* 2), '(toFixed 2)] 5

interpret = (source) => {
  program = source | trim | split (char 10) | _map (
    (line) => tuple $ (line | trim) | split " "
  )

  print program

  loop = (index) => {
    match (index == '_length program) (
      true => "done"
      _    => {
        evaluate program.(index)
        loop (index + 1)
      }
    )
  }

  loop 0

  # program | _map (statement) => evaluate statement
}

source = "
  10 PRINT 'HELLO'
  20 GOTO 10
  30 INPUT A$
"

interpret source
