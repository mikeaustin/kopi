# Spawns coroutine that simply yields values
generator = spawn () => {
  loop = (x) => {
    yield _ => x
    loop (x + 1)
  }
  loop (1)
}

# Prints [1, 2, 3] to the console
print $ 1..3 | map (n) => send generator ()

# Convenience for yield + match
select = fns => yield (x => match x fns)

# Spawns a coroutine that yields squares
coroutine = spawn () => {
  loop = () => {
    value = select (
      0 => 1
      n => n * n
    )
    loop ()
  }
  loop ()
}

# Prints [1, 4, 9] to the console
print $ 1..3 | map (n) => send coroutine n

# Waits 3 seconds then adds 1 + 2
print $ (sleep 1) + (sleep 2)


spawn () => loop exit => () => {
  write $ " " ++ time () ++ (char 13)
  sleep 1
}

spawn () => loop exit => (n = 1) => {
  write $ (string n)
  sleep 1

  n + 1
}
