html () = children => {
  (type: "element", tag: "html", attrs: {}, children: children)
}
body (:class, :_) = children => (type: "element", tag: "body", attrs: { "class": class }, children: children)
ul (:id, :class, :_) = children => (type: "element", tag: "ul", attrs: { "id": id, "class": class }, children: children)
li (:class, :_) = children => (type: "element", tag: "li", attrs: { "class": class }, children: children)
button (:class, :onClick) = children => {
  (type: "element", tag: "button", attrs: { "class": class, "onClick": onClick }, children: children)
}
text (value) = (type: "text", value: value)

indent (n) = {
  loop (n = n, str = "") => match n (
    0 => break str
    _ => (n - 1, str "  ")
  )
}

generateAttrString (name, value) = {
  " " name "='" value "'"
}

generateHtmlString (node, level) = {
  match node (
    "text", value => {
      indent level ++ String value ++ String.Newline
    }
    "element", tag, props, children => {
      inner = children | map child => generateHtmlString (child, level + 1)
      attrs = props | reduce "" $ accum, (key, value) => accum ++ generateAttrString (key, value)

      indent level "<" tag attrs ">" String.Newline ++
        inner | join "" ++
      indent level "</" tag ">" String.Newline
    }
  )
}

"
  {spaces}<{tag}>
    {children | map (child) => generateHtmlString (child, level + 1)}
  {spaces}</{tag}>
"

documentTree = (
  html () [
    text "Hello"
    ul (id: "id", class: "class") $ 1..5 | map (n) => (
      match ('even n) (
        true => li (class: "even") [text n]
        false => li (class: "odd") [text 0]
      )
    )
  ]
)

htmlString = generateHtmlString (documentTree, 0)

print htmlString

export (
  generateHtmlString: generateHtmlString
  html: html
  body: body
  text: text
  button: button
)
