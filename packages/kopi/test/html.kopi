print ""
print "== html =========================================="
print ""

html = props => children => ("element", "html", props, children)
body = props => children => ("element", "body", props, children)
ul = props => children => ("element", "ul", props, children)
li = props => children => ("element", "li", props, children)
text = value => ("text", value)

indent = (n) => {
  loop = (n, str) => match n (
    0 => str
    _ => loop ((n - 1), (str ++ "  "))
  )
  loop (n, "")
}

generateHtmlString = (node, level) => {
  match node (
    "text", value => {
      indent level ++ String value ++ char 10
    }
    "element", tag, props, children => {
      inner = children | _map child => generateHtmlString (child, level + 1)

      (indent level) ++ "<" ++ tag ++ ">" ++ (char 10) ++ (
        inner | _join ""
      ) ++ (indent level) ++ "</" ++ tag ++ ">" ++ (char 10)
    }
  )
}

"
  {spaces}<{tag}>
    {children | map (child) => generateHtmlString (child, level + 1)}
  {spaces}</{tag}>
"

documentTree = (
  html () [
    text "Hello"
    ul (class: "list") [
      li (class: "item") [(text 1)]
      li (class: "item") [(text 2)]
    ]
  ]
)

htmlString = generateHtmlString (documentTree, 0)

print htmlString

export (
  generateHtmlString: generateHtmlString
  html: html
  body: body
  text: text
)
