indent (n) = {
  loop (n = n, str = "") => match n (
    0 => break str
    _ => (n - 1, str "  ")
  )
}

generateAttrString (name, value) = {
  " " name "='" value "'"
}


Element = type (tag: String, attrs: Dict, children: Array)

Html = type (element: Element)
Text = type (value: String)

html () = children => Html (element: Element (tag: "html", attrs: {}, children: children))
text (value) = Text (value: value)


extend Element (
  render: (:tag, :attrs, :children) => (level) => {
    inner = children | map (child) => (child | render (level + 1))
    attrs = attrs | reduce "" $ accum, (key, value) => accum ++ generateAttrString (key, value)

    indent level "<" tag attrs ">" String.Newline ++
      inner | join "" ++
    indent level "</" tag ">" String.Newline
  }
)

extend Html (
  render: (:element) => (level) => {
    element | render (level)
  }
)

extend Text (
  render: (:value) => (level) => {
    indent level ++ String value ++ String.Newline
  }
)


documentTree = (
  html () [
    text "Hello"
  ]
)

print $ documentTree | render (0)
