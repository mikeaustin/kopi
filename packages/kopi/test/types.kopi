ship = position => (type: "ship", position: position)
asteroid = position => (type: "asteroid", position: position)

objects = [
  ship (position: (Vector 10, 20))
  asteroid (position: (Vector 20, 30))
]

print $ objects | _map object => match object (
  "ship", position => ship (position + (Vector 10, 10))
  "asteroid", position => asteroid (position + (Vector 1, 1))
)

# f = 0 => "Zero"
# g = n => match n (
#   f
#   n => "Nonzero"
# )

Point = type (x: Int, y: Int)

point = Point (x: 1, y: 1)

print $ point.x, point.y

extend Point (
  length: (:x, :y) => () => (x * x + y * y) | sqrt
)

print $ point | length | toFixed 3

{
  extend Point (
    length: (this) => () => 404.404
  )

  print $ point | length | toFixed 3
}

print $ point | length | toFixed 3


Person = type (name: String, age: Int)

person = Person (name: "Joe", age: 30)
print person.name, person.age

:name, :age = person
print name, age
