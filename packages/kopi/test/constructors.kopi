# Smart Constructors

isValidEmail (email) = (email | split "@" | size) == 2

Error = type (message: String)
Email = type (value: String)
Person = type (name: String, email: Email)

makeEmail (email) = match (isValidEmail email) (
  false => Error (message: "Invalid email address")
  _     => Email (value: email)
)

makePerson (nameStr, emailStr) = {
  match (nameStr, makeEmail emailStr) (
    tuple ['hasErrors tuple] => Error (message: "Can't create User: " ++ 'errors tuple)
    name, email              => Person (name: name, email: email)
    _ => _
  )
}

print $ makePerson (name: "Joe", email: "foo@bar.com")
print $ makePerson ("Joe", "foo.com")

# make(Person)


MetalResistor = type (bands: Number)

metalResistor (n) = match n (
  n [n < 4] => "Invalid number of resistor bands"
  n         => MetalResistor (bands: n)
)

inspect $ metalResistor 5
inspect $ metalResistor 3
