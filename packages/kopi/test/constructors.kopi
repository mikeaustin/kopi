# Smart Constructors

Error = type (message: String)

Person = type (name: String, email: String)

isValidEmail (email) = match (email | split "@") (
  array ['size array != 2] => Error (message: "Invalid email address")
  _ => address
)

makePerson = (name, email) => match (isValidEmail email) (
  true    => Person (name, email)
  _       => _
)

person = Person (name: "Joe", email: "foo.com")
person = makePerson ("Joe", "foo.com")

inspect person


Email = type (value: String)

makeEmail (email) = match (isValidEmail email) (
  false => Error (message: "Invalid email address")
  _     => Email (value: email)
)

Person = type (name: String, email: Email)

makePerson (:name, :email) = Person (
  name: name
  email: Email (value: email)
)

# makeUser (nameStr, emailStr) = {
#   match (Email emailStr) (
#     Error error => Error "Can't create User: " error
#     email       => User (
#       name: name
#       email: email
#     )
#   )
# }

print $ makePerson (name: "Joe", email: "foo@bar.com")
print $ makePerson ("Joe", "foo@bar.com")

# make(Person)


MetalResistor = type (bands: Number)

metalResistor (n) = match n (
  n [n < 4] => "Invalid number of resistor bands"
  n         => MetalResistor (bands: n)
)

inspect $ metalResistor 5
inspect $ metalResistor 3
