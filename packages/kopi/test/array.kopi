print $ [1, 2, 3].(0)
print $ [1, 2, 3].(0..2)
print $ [1, 2, 3].(0, 2, 1)

print $ [1, 1 + 1, 3] | _find (x) => x > 1
print $ [1, 1 + 1, 3] | _find '(> 1)

inspect '(> 1)

print $ 1..5 | flatMap (a) => (1..5 | flatMap (b) => a * b)
print $ 1..5, 1..5 | product (a, b) => a * b


array = [1, 2, 3]

square (x) = x * x

print $ array 0 [4]
print $ array (0 - 1) [4]
print $ array (0 - 1) [4, 5]
print $ array 0..2 [4]
print $ array 1..3 [4]
print $ array 0..1 []
print $ (array 1 square) 2 square

extend Array () (
  sum: (this) => () => (this | _reduce 0 $ (accum, n) => accum + n)
)

print $ Array (1, 2, 3)

print $ [1, 2, 3] | sum

"
print $ array | prepend [4]
print $ array | append [4]
print $ array | insert 3 [4]
print $ array | replace 0..2 [4, 5]
print $ array | remove 0..1
print $ array | update 1 square | update 2 square
print $ array | update (1, 2) square

print $ table | replace 1 4
print $ table | remove 1
print $ table | update (1, 2) square

Be able to swap array and sorted table uses

[1, 2] | replace 3 'Hello'     [0: 1, 1: 2] | replace 3 'Hello'
[1, 2] | remove 3              [0: 1, 1: 2] | remove 3
[1, 2] | update 3 square       [0: 1, 1: 2] | update 3 square

+:
:+

"
