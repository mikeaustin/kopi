fix = f => (x => f (y => x x y)) x => f (y => x x y)

f = g => x => g x
g = f => x => f x

e = (
  :f = (:m, :a) => m (f: f, a: a) * a (f: f, m: m)
  :m = (:f, :a) => f (m: m, a: a) / a (f: f, m: m)
  :a = (:f, :m) => f (m: m, a: a) / m (f: f, a: a)
) => {
  (
    f: f (m: m, a: a)
    m: m (f: f, a: a)
    a: a (f: f, m: m)
  )
}

# print $ e (m: () => 5, a: () => 2)

Equation = type ()

@Equation = (
  :f = (this) => () => (this | m) * (this | a)
  :m = (this) => () => (this | f) / (this | a)
  :a = (this) => () => (this | f) / (this | m)
) => (
  f: f
  m: m
  a: a
)

extend Equation $ @Equation (
  m: (this) => () => 5
  a: (this) => () => 2
)

print $ Equation () | f
