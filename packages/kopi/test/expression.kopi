Const = type (value: Int)
AddOp = type (left: Const, right: Const)

extend Const (
  eval: (this) => () => this.value
)

extend AddOp (
  eval: (this) => () => (this.left | eval) + (this.right | eval)
)

program = AddOp (
  left: Const (value: 2)
  right: Const (value: 3)
)

print $ program | eval


# Introduce a new type 'Var'

environment = {
  "a": 3
  "b": 7
}

Var = type (name: String)

extend Var (
  eval: (this) => () => environment.(this.name)
)

program = AddOp (
  left: Var (name: "a")
  right: Var (name: "b")
)

print $ program | eval


# Introduce a new operation 'print'

extend Const (
  print: (this) => () => String this.value
)

extend AddOp (
  print: (this) => () => (this.left | print) " + " (this.right | print)
)

extend Var (
  print: (this) => () => this.name
)

print $ program | print
