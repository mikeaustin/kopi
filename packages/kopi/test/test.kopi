# Basic syntax and semantics tests

print (max 1, 2)

print (
  (a, b => a + b) 2, 3
  2 * (3 + 4) + 1
  match 5 (0 => 1), (n => n * n)
)


print ((x, k => (x, k => k x + 1) x + x, k) 5, (x => x))


fix = f => (x => f (y => x x y)) x => f (y => x x y)
factorial = fix factorial => n => match n (
  0 => 1
  n => n * (factorial n - 1)
)
print (factorial 170)


factorial = n => match n (
  0 => 1
  n => n * (factorial n - 1)
)
print (factorial 170)


print $ let (x = 2, y = 3) => x + y


(0, x => x) | getMatches 0, 1


vecA, vecB = (Vector 1, 2), (Vector 2, 3)
print (vecA + vecB | length | toFixed 3)


print $ 1..2, "a".."z" | map (a, b) => a, b

print $ 1..3 | map even

print $ 1..5 | map n => {
  x = n * n
  x
}

print $ 1..3 | map 'toString


next = repeat (n) => n + 1

value, next = next ()
value, next = next ()

print value


print (
  fetch "https://google.com"
  fetch "https://google.jp"
)


loop = (n = 1) => {
  sleep 1
  print n
  match n (
    3 => ()
    n => loop (n + 1)
  )
}

spawn loop

print "done"
