const evaluate1 = <AST extends unknown>(next: (ast: AST) => number, evaluate: (ast: any) => number) => (ast: 'A' | 'B' | AST) => {
  switch (ast) {
    case 'A':
      return 1;
    case 'B':
      return 2;
    default:
      return next(ast);
  }
};

const evaluate2 = <AST extends unknown>(next: (ast: AST) => number, evaluate: (ast: any) => number) => (ast: 'C' | AST) => {
  console.log(evaluate);
  switch (ast) {
    case 'C':
      return 3;
    default:
      return next(ast);
  }
};

const evaluate3 = (ast: 'D') => {
  switch (ast) {
    case 'D':
      return 4;
    default:
      const error: never = ast;
  }

  throw new Error();
};

const evaluate = <AST extends 'A' | 'B' | 'C' | 'D'>(ast: AST): number => {
  return pipeline(ast);
};

const pipeline = evaluate1(evaluate2(evaluate3, evaluate), evaluate);

console.log(evaluate('A'));
console.log(evaluate('B'));
console.log(evaluate('C'));
console.log(evaluate('D'));
