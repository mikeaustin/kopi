Block
  = __ head:Statement? tail:(_ (Newline _)+ Statement)* __

Statement
  = Assignment
  / Expression

Assignment
  = pattern:AssignmentPattern _ "=" _ expression:Expression

Expression
  = PipeExpression

PipeExpression
  = head:AddExpression tail:(_ "|" _ Identifier _ PrimaryExpression? (_ PrimaryExpression)*)*

AddExpression
  = head:MultiplyExpression tail:(_ ("+" / "-") _ MultiplyExpression)*

MultiplyExpression
  = head:ApplyExpression tail:(_ ("*" / "/" / "%") _ ApplyExpression)*

ApplyExpression
  = expression:RangeExpression _arguments:(_ RangeExpression)*

RangeExpression
  = from:MemberExpression _ ".." _ to:MemberExpression
  / MemberExpression

MemberExpression
  = head:UnaryExpression tail:("." (Identifier / NumericLiteral))*

UnaryExpression
  = PrimaryExpression
  / operator:("-") argumentExpression:UnaryExpression

//
// PrimaryExpression
//

PrimaryExpression
  = "(" __ fieldName:(Identifier ":")? _ head:Expression? tail:(_ (("," __) / __) (Identifier ":")? _ Expression)* __ ")" _ !"=>"
  / FunctionExpression
  / NumericLiteral
  / StringLiteral
  / BooleanLiteral
  / ArrayLiteral
  / DictLiteral
  / BlockExpression
  / AstLiteral
  / Identifier

FunctionExpression
  = parameterPattern:Pattern _ "=>" _ bodyExpression:AddExpression

ArrayLiteral
  = "[" __ head:Expression? tail:(_ (("," __) / __) _ Expression)* __ "]" _ !"=>"

DictLiteral
  = "{" _ ":" _ "}"
  / "{" __ key:PrimaryExpression ":" _ head:Expression tail:(_ (("," __) / __) PrimaryExpression ":" _ Expression)* __ "}" _ !"=>"

BlockExpression
  = "{" _ statements:Block _ "}"

NumericLiteral "number"
  = value:([0-9]+ ("." !"." [0-9]+)?)

StringLiteral "string"
  = _ "\"" value:[^"]* "\"" _

BooleanLiteral
  = value:("true" / "false")

AstLiteral "ast-literal"
  = "'" expression:PrimaryExpression

Identifier "identifier"
  = _ name:([_a-zA-Z][_a-zA-Z0-9]*) _

//
// Pattern
//

AssignmentPattern
  = AssignmentFunctionPattern
  / AssignmentPrimaryPattern

AssignmentFunctionPattern
  = ident:Identifier _ parameterPattern:AssignmentPrimaryPattern

AssignmentPrimaryPattern
  = "(" head:Pattern? tail:(_ "," _ Pattern)* ")"
  / AssignmentIdentifierPattern

AssignmentIdentifierPattern
  = identifier:Identifier

//

Pattern
  = PrimaryPattern

PrimaryPattern
  = "(" head:Pattern? tail:(_ "," _ Pattern)* ")"
  / NumericLiteralPattern
  / IdentifierPattern

NumericLiteralPattern
  = number:NumericLiteral
  
IdentifierPattern
  = identifier:Identifier defaultExpression:(_ "=" _ Expression)?

_ "space"
  = " "*

__ "whitespace"
  = (" " / Newline)*

Comment "comment"
  = "#" (!Newline .)*

Newline
  = Comment? [\r?\n]
