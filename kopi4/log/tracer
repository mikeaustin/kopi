Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: TupleExpression {
      elements: [ApplyExpression {
        expr: FunctionExpression {
          params: TuplePattern {
            elements: [IdentifierPattern {
              name: 'a',
              init: undefined
            }, IdentifierPattern {
              name: 'b',
              init: undefined
            }]
          },
          expr: OperatorExpression {
            op: '+',
            left: Identifier {
              name: 'a'
            },
            right: Identifier {
              name: 'b'
            }
          }
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 2
          }, NumericLiteral {
            value: 3
          }]
        }
      }, OperatorExpression {
        op: '+',
        left: OperatorExpression {
          op: '*',
          left: NumericLiteral {
            value: 2
          },
          right: OperatorExpression {
            op: '+',
            left: NumericLiteral {
              value: 3
            },
            right: NumericLiteral {
              value: 4
            }
          }
        },
        right: NumericLiteral {
          value: 1
        }
      }, ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'match'
          },
          args: NumericLiteral {
            value: 5
          }
        },
        args: TupleExpression {
          elements: [FunctionExpression {
            params: NumericLiteralPattern {
              value: 0
            },
            expr: NumericLiteral {
              value: 1
            }
          }, FunctionExpression {
            params: IdentifierPattern {
              name: 'n',
              init: undefined
            },
            expr: OperatorExpression {
              op: '*',
              left: Identifier {
                name: 'n'
              },
              right: Identifier {
                name: 'n'
              }
            }
          }]
        }
      }]
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'x',
            init: undefined
          }, IdentifierPattern {
            name: 'k',
            init: undefined
          }]
        },
        expr: ApplyExpression {
          expr: FunctionExpression {
            params: TuplePattern {
              elements: [IdentifierPattern {
                name: 'x',
                init: undefined
              }, IdentifierPattern {
                name: 'k',
                init: undefined
              }]
            },
            expr: ApplyExpression {
              expr: Identifier {
                name: 'k'
              },
              args: OperatorExpression {
                op: '+',
                left: Identifier {
                  name: 'x'
                },
                right: NumericLiteral {
                  value: 1
                }
              }
            }
          },
          args: TupleExpression {
            elements: [OperatorExpression {
              op: '+',
              left: Identifier {
                name: 'x'
              },
              right: Identifier {
                name: 'x'
              }
            }, Identifier {
              name: 'k'
            }]
          }
        }
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 5
        }, FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: Identifier {
            name: 'x'
          }
        }]
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'fix'
    },
    expr: FunctionExpression {
      params: IdentifierPattern {
        name: 'f',
        init: undefined
      },
      expr: ApplyExpression {
        expr: FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: ApplyExpression {
            expr: Identifier {
              name: 'f'
            },
            args: FunctionExpression {
              params: IdentifierPattern {
                name: 'y',
                init: undefined
              },
              expr: ApplyExpression {
                expr: ApplyExpression {
                  expr: Identifier {
                    name: 'x'
                  },
                  args: Identifier {
                    name: 'x'
                  }
                },
                args: Identifier {
                  name: 'y'
                }
              }
            }
          }
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: ApplyExpression {
            expr: Identifier {
              name: 'f'
            },
            args: FunctionExpression {
              params: IdentifierPattern {
                name: 'y',
                init: undefined
              },
              expr: ApplyExpression {
                expr: ApplyExpression {
                  expr: Identifier {
                    name: 'x'
                  },
                  args: Identifier {
                    name: 'x'
                  }
                },
                args: Identifier {
                  name: 'y'
                }
              }
            }
          }
        }
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'factorial'
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'fix'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'factorial',
          init: undefined
        },
        expr: FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: ApplyExpression {
            expr: ApplyExpression {
              expr: Identifier {
                name: 'match'
              },
              args: Identifier {
                name: 'n'
              }
            },
            args: TupleExpression {
              elements: [FunctionExpression {
                params: NumericLiteralPattern {
                  value: 0
                },
                expr: NumericLiteral {
                  value: 1
                }
              }, FunctionExpression {
                params: IdentifierPattern {
                  name: 'n',
                  init: undefined
                },
                expr: OperatorExpression {
                  op: '*',
                  left: Identifier {
                    name: 'n'
                  },
                  right: ApplyExpression {
                    expr: Identifier {
                      name: 'factorial'
                    },
                    args: OperatorExpression {
                      op: '-',
                      left: Identifier {
                        name: 'n'
                      },
                      right: NumericLiteral {
                        value: 1
                      }
                    }
                  }
                }
              }]
            }
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: NumericLiteral {
        value: 170
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'let'
      },
      args: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'x',
            init: NumericLiteral {
              value: 2
            }
          }, IdentifierPattern {
            name: 'y',
            init: NumericLiteral {
              value: 3
            }
          }]
        },
        expr: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'x'
          },
          right: Identifier {
            name: 'y'
          }
        }
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'name'
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'input'
      },
      args: StringLiteral {
        value: 'Name?'
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: TupleExpression {
      elements: [StringLiteral {
        value: 'hi'
      }, Identifier {
        name: 'name'
      }]
    }
  }, PipeExpression {
    left: FunctionExpression {
      params: TuplePattern {
        elements: [NumericLiteralPattern {
          value: 0
        }, IdentifierPattern {
          name: 'x',
          init: undefined
        }]
      },
      expr: Identifier {
        name: 'x'
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'getMatches'
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 0
        }, NumericLiteral {
          value: 1
        }]
      }
    }
  }, Assignment {
    pattern: TuplePattern {
      elements: [IdentifierPattern {
        name: 'vecA'
      }, IdentifierPattern {
        name: 'vecB'
      }]
    },
    expr: TupleExpression {
      elements: [ApplyExpression {
        expr: Identifier {
          name: 'Vector'
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 1
          }, NumericLiteral {
            value: 2
          }]
        }
      }, ApplyExpression {
        expr: Identifier {
          name: 'Vector'
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 2
          }, NumericLiteral {
            value: 3
          }]
        }
      }]
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: PipeExpression {
        left: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'vecA'
          },
          right: Identifier {
            name: 'vecB'
          }
        },
        right: Identifier {
          name: 'length'
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'toFixed'
        },
        args: NumericLiteral {
          value: 3
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: TupleExpression {
        elements: [RangeExpression {
          from: NumericLiteral {
            value: 1
          },
          to: NumericLiteral {
            value: 2
          }
        }, RangeExpression {
          from: StringLiteral {
            value: 'a'
          },
          to: StringLiteral {
            value: 'z'
          }
        }]
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: FunctionExpression {
          params: TuplePattern {
            elements: [IdentifierPattern {
              name: 'a',
              init: undefined
            }, IdentifierPattern {
              name: 'b',
              init: undefined
            }]
          },
          expr: TupleExpression {
            elements: [Identifier {
              name: 'a'
            }, Identifier {
              name: 'b'
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 3
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: Identifier {
          name: 'even'
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 5
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: Block {
            statements: [Assignment {
              pattern: IdentifierPattern {
                name: 'x'
              },
              expr: OperatorExpression {
                op: '*',
                left: Identifier {
                  name: 'n'
                },
                right: Identifier {
                  name: 'n'
                }
              }
            }, Identifier {
              name: 'x'
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 3
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: AstLiteral {
          value: Identifier {
            name: 'toString'
          }
        }
      }
    }
  }, TupleExpression {
    elements: [ApplyExpression {
      expr: Identifier {
        name: 'fetch'
      },
      args: StringLiteral {
        value: 'https://google.com'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'fetch'
      },
      args: StringLiteral {
        value: 'https://google.jp'
      }
    }]
  }, ApplyExpression {
    expr: Identifier {
      name: 'spawn'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'fix'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'loop',
          init: undefined
        },
        expr: FunctionExpression {
          params: TuplePattern {
            elements: []
          },
          expr: Block {
            statements: [ApplyExpression {
              expr: Identifier {
                name: 'sleep'
              },
              args: NumericLiteral {
                value: 1
              }
            }, ApplyExpression {
              expr: Identifier {
                name: 'print'
              },
              args: StringLiteral {
                value: 'hi'
              }
            }, ApplyExpression {
              expr: Identifier {
                name: 'loop'
              },
              args: TupleExpression {
                elements: []
              }
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'done'
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: TupleExpression {
    elements: [ApplyExpression {
      expr: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'a',
            init: undefined
          }, IdentifierPattern {
            name: 'b',
            init: undefined
          }]
        },
        expr: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'a'
          },
          right: Identifier {
            name: 'b'
          }
        }
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 2
        }, NumericLiteral {
          value: 3
        }]
      }
    }, OperatorExpression {
      op: '+',
      left: OperatorExpression {
        op: '*',
        left: NumericLiteral {
          value: 2
        },
        right: OperatorExpression {
          op: '+',
          left: NumericLiteral {
            value: 3
          },
          right: NumericLiteral {
            value: 4
          }
        }
      },
      right: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'match'
        },
        args: NumericLiteral {
          value: 5
        }
      },
      args: TupleExpression {
        elements: [FunctionExpression {
          params: NumericLiteralPattern {
            value: 0
          },
          expr: NumericLiteral {
            value: 1
          }
        }, FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: OperatorExpression {
            op: '*',
            left: Identifier {
              name: 'n'
            },
            right: Identifier {
              name: 'n'
            }
          }
        }]
      }
    }]
  }
}

TupleExpression {
  elements: [ApplyExpression {
    expr: FunctionExpression {
      params: TuplePattern {
        elements: [IdentifierPattern {
          name: 'a',
          init: undefined
        }, IdentifierPattern {
          name: 'b',
          init: undefined
        }]
      },
      expr: OperatorExpression {
        op: '+',
        left: Identifier {
          name: 'a'
        },
        right: Identifier {
          name: 'b'
        }
      }
    },
    args: TupleExpression {
      elements: [NumericLiteral {
        value: 2
      }, NumericLiteral {
        value: 3
      }]
    }
  }, OperatorExpression {
    op: '+',
    left: OperatorExpression {
      op: '*',
      left: NumericLiteral {
        value: 2
      },
      right: OperatorExpression {
        op: '+',
        left: NumericLiteral {
          value: 3
        },
        right: NumericLiteral {
          value: 4
        }
      }
    },
    right: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: NumericLiteral {
        value: 5
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: Identifier {
            name: 'n'
          }
        }
      }]
    }
  }]
}

ApplyExpression {
  expr: FunctionExpression {
    params: TuplePattern {
      elements: [IdentifierPattern {
        name: 'a',
        init: undefined
      }, IdentifierPattern {
        name: 'b',
        init: undefined
      }]
    },
    expr: OperatorExpression {
      op: '+',
      left: Identifier {
        name: 'a'
      },
      right: Identifier {
        name: 'b'
      }
    }
  },
  args: TupleExpression {
    elements: [NumericLiteral {
      value: 2
    }, NumericLiteral {
      value: 3
    }]
  }
}

TupleExpression {
  elements: [NumericLiteral {
    value: 2
  }, NumericLiteral {
    value: 3
  }]
}

NumericLiteral {
  value: 2
}

NumericLiteral {
  value: 3
}

OperatorExpression {
  op: '+',
  left: OperatorExpression {
    op: '*',
    left: NumericLiteral {
      value: 2
    },
    right: OperatorExpression {
      op: '+',
      left: NumericLiteral {
        value: 3
      },
      right: NumericLiteral {
        value: 4
      }
    }
  },
  right: NumericLiteral {
    value: 1
  }
}

OperatorExpression {
  op: '*',
  left: NumericLiteral {
    value: 2
  },
  right: OperatorExpression {
    op: '+',
    left: NumericLiteral {
      value: 3
    },
    right: NumericLiteral {
      value: 4
    }
  }
}

NumericLiteral {
  value: 2
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: NumericLiteral {
      value: 5
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: Identifier {
          name: 'n'
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

OperatorExpression {
  op: '+',
  left: NumericLiteral {
    value: 3
  },
  right: NumericLiteral {
    value: 4
  }
}

NumericLiteral {
  value: 3
}

NumericLiteral {
  value: 4
}

FunctionExpression {
  params: TuplePattern {
    elements: [IdentifierPattern {
      name: 'a',
      init: undefined
    }, IdentifierPattern {
      name: 'b',
      init: undefined
    }]
  },
  expr: OperatorExpression {
    op: '+',
    left: Identifier {
      name: 'a'
    },
    right: Identifier {
      name: 'b'
    }
  }
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'a',
    init: undefined
  }, IdentifierPattern {
    name: 'b',
    init: undefined
  }]
}

IdentifierPattern {
  name: 'a',
  init: undefined
}

IdentifierPattern {
  name: 'b',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: NumericLiteral {
    value: 5
  }
}

NumericLiteral {
  value: 5
}

OperatorExpression {
  op: '+',
  left: Identifier {
    name: 'a'
  },
  right: Identifier {
    name: 'b'
  }
}

Identifier {
  name: 'a'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'match'
}

Identifier {
  name: 'b'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: ApplyExpression {
    expr: FunctionExpression {
      params: TuplePattern {
        elements: [IdentifierPattern {
          name: 'x',
          init: undefined
        }, IdentifierPattern {
          name: 'k',
          init: undefined
        }]
      },
      expr: ApplyExpression {
        expr: FunctionExpression {
          params: TuplePattern {
            elements: [IdentifierPattern {
              name: 'x',
              init: undefined
            }, IdentifierPattern {
              name: 'k',
              init: undefined
            }]
          },
          expr: ApplyExpression {
            expr: Identifier {
              name: 'k'
            },
            args: OperatorExpression {
              op: '+',
              left: Identifier {
                name: 'x'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        },
        args: TupleExpression {
          elements: [OperatorExpression {
            op: '+',
            left: Identifier {
              name: 'x'
            },
            right: Identifier {
              name: 'x'
            }
          }, Identifier {
            name: 'k'
          }]
        }
      }
    },
    args: TupleExpression {
      elements: [NumericLiteral {
        value: 5
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'x',
          init: undefined
        },
        expr: Identifier {
          name: 'x'
        }
      }]
    }
  }
}

ApplyExpression {
  expr: FunctionExpression {
    params: TuplePattern {
      elements: [IdentifierPattern {
        name: 'x',
        init: undefined
      }, IdentifierPattern {
        name: 'k',
        init: undefined
      }]
    },
    expr: ApplyExpression {
      expr: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'x',
            init: undefined
          }, IdentifierPattern {
            name: 'k',
            init: undefined
          }]
        },
        expr: ApplyExpression {
          expr: Identifier {
            name: 'k'
          },
          args: OperatorExpression {
            op: '+',
            left: Identifier {
              name: 'x'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      },
      args: TupleExpression {
        elements: [OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'x'
          },
          right: Identifier {
            name: 'x'
          }
        }, Identifier {
          name: 'k'
        }]
      }
    }
  },
  args: TupleExpression {
    elements: [NumericLiteral {
      value: 5
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'x',
        init: undefined
      },
      expr: Identifier {
        name: 'x'
      }
    }]
  }
}

TupleExpression {
  elements: [NumericLiteral {
    value: 5
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'x',
      init: undefined
    },
    expr: Identifier {
      name: 'x'
    }
  }]
}

NumericLiteral {
  value: 5
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'x',
    init: undefined
  },
  expr: Identifier {
    name: 'x'
  }
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

FunctionExpression {
  params: TuplePattern {
    elements: [IdentifierPattern {
      name: 'x',
      init: undefined
    }, IdentifierPattern {
      name: 'k',
      init: undefined
    }]
  },
  expr: ApplyExpression {
    expr: FunctionExpression {
      params: TuplePattern {
        elements: [IdentifierPattern {
          name: 'x',
          init: undefined
        }, IdentifierPattern {
          name: 'k',
          init: undefined
        }]
      },
      expr: ApplyExpression {
        expr: Identifier {
          name: 'k'
        },
        args: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'x'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    },
    args: TupleExpression {
      elements: [OperatorExpression {
        op: '+',
        left: Identifier {
          name: 'x'
        },
        right: Identifier {
          name: 'x'
        }
      }, Identifier {
        name: 'k'
      }]
    }
  }
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'x',
    init: undefined
  }, IdentifierPattern {
    name: 'k',
    init: undefined
  }]
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

IdentifierPattern {
  name: 'k',
  init: undefined
}

ApplyExpression {
  expr: FunctionExpression {
    params: TuplePattern {
      elements: [IdentifierPattern {
        name: 'x',
        init: undefined
      }, IdentifierPattern {
        name: 'k',
        init: undefined
      }]
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'k'
      },
      args: OperatorExpression {
        op: '+',
        left: Identifier {
          name: 'x'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  },
  args: TupleExpression {
    elements: [OperatorExpression {
      op: '+',
      left: Identifier {
        name: 'x'
      },
      right: Identifier {
        name: 'x'
      }
    }, Identifier {
      name: 'k'
    }]
  }
}

TupleExpression {
  elements: [OperatorExpression {
    op: '+',
    left: Identifier {
      name: 'x'
    },
    right: Identifier {
      name: 'x'
    }
  }, Identifier {
    name: 'k'
  }]
}

OperatorExpression {
  op: '+',
  left: Identifier {
    name: 'x'
  },
  right: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'k'
}

Identifier {
  name: 'x'
}

FunctionExpression {
  params: TuplePattern {
    elements: [IdentifierPattern {
      name: 'x',
      init: undefined
    }, IdentifierPattern {
      name: 'k',
      init: undefined
    }]
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'k'
    },
    args: OperatorExpression {
      op: '+',
      left: Identifier {
        name: 'x'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'x',
    init: undefined
  }, IdentifierPattern {
    name: 'k',
    init: undefined
  }]
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

IdentifierPattern {
  name: 'k',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'k'
  },
  args: OperatorExpression {
    op: '+',
    left: Identifier {
      name: 'x'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '+',
  left: Identifier {
    name: 'x'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'x'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'k'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'print'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'fix'
  },
  expr: FunctionExpression {
    params: IdentifierPattern {
      name: 'f',
      init: undefined
    },
    expr: ApplyExpression {
      expr: FunctionExpression {
        params: IdentifierPattern {
          name: 'x',
          init: undefined
        },
        expr: ApplyExpression {
          expr: Identifier {
            name: 'f'
          },
          args: FunctionExpression {
            params: IdentifierPattern {
              name: 'y',
              init: undefined
            },
            expr: ApplyExpression {
              expr: ApplyExpression {
                expr: Identifier {
                  name: 'x'
                },
                args: Identifier {
                  name: 'x'
                }
              },
              args: Identifier {
                name: 'y'
              }
            }
          }
        }
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'x',
          init: undefined
        },
        expr: ApplyExpression {
          expr: Identifier {
            name: 'f'
          },
          args: FunctionExpression {
            params: IdentifierPattern {
              name: 'y',
              init: undefined
            },
            expr: ApplyExpression {
              expr: ApplyExpression {
                expr: Identifier {
                  name: 'x'
                },
                args: Identifier {
                  name: 'x'
                }
              },
              args: Identifier {
                name: 'y'
              }
            }
          }
        }
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'f',
    init: undefined
  },
  expr: ApplyExpression {
    expr: FunctionExpression {
      params: IdentifierPattern {
        name: 'x',
        init: undefined
      },
      expr: ApplyExpression {
        expr: Identifier {
          name: 'f'
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'y',
            init: undefined
          },
          expr: ApplyExpression {
            expr: ApplyExpression {
              expr: Identifier {
                name: 'x'
              },
              args: Identifier {
                name: 'x'
              }
            },
            args: Identifier {
              name: 'y'
            }
          }
        }
      }
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'x',
        init: undefined
      },
      expr: ApplyExpression {
        expr: Identifier {
          name: 'f'
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'y',
            init: undefined
          },
          expr: ApplyExpression {
            expr: ApplyExpression {
              expr: Identifier {
                name: 'x'
              },
              args: Identifier {
                name: 'x'
              }
            },
            args: Identifier {
              name: 'y'
            }
          }
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'f',
  init: undefined
}

IdentifierPattern {
  name: 'fix'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'factorial'
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'fix'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'factorial',
        init: undefined
      },
      expr: FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: ApplyExpression {
          expr: ApplyExpression {
            expr: Identifier {
              name: 'match'
            },
            args: Identifier {
              name: 'n'
            }
          },
          args: TupleExpression {
            elements: [FunctionExpression {
              params: NumericLiteralPattern {
                value: 0
              },
              expr: NumericLiteral {
                value: 1
              }
            }, FunctionExpression {
              params: IdentifierPattern {
                name: 'n',
                init: undefined
              },
              expr: OperatorExpression {
                op: '*',
                left: Identifier {
                  name: 'n'
                },
                right: ApplyExpression {
                  expr: Identifier {
                    name: 'factorial'
                  },
                  args: OperatorExpression {
                    op: '-',
                    left: Identifier {
                      name: 'n'
                    },
                    right: NumericLiteral {
                      value: 1
                    }
                  }
                }
              }
            }]
          }
        }
      }
    }
  }
}

ApplyExpression {
  expr: Identifier {
    name: 'fix'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'factorial',
      init: undefined
    },
    expr: FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'match'
          },
          args: Identifier {
            name: 'n'
          }
        },
        args: TupleExpression {
          elements: [FunctionExpression {
            params: NumericLiteralPattern {
              value: 0
            },
            expr: NumericLiteral {
              value: 1
            }
          }, FunctionExpression {
            params: IdentifierPattern {
              name: 'n',
              init: undefined
            },
            expr: OperatorExpression {
              op: '*',
              left: Identifier {
                name: 'n'
              },
              right: ApplyExpression {
                expr: Identifier {
                  name: 'factorial'
                },
                args: OperatorExpression {
                  op: '-',
                  left: Identifier {
                    name: 'n'
                  },
                  right: NumericLiteral {
                    value: 1
                  }
                }
              }
            }
          }]
        }
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'factorial',
    init: undefined
  },
  expr: FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'match'
        },
        args: Identifier {
          name: 'n'
        }
      },
      args: TupleExpression {
        elements: [FunctionExpression {
          params: NumericLiteralPattern {
            value: 0
          },
          expr: NumericLiteral {
            value: 1
          }
        }, FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: OperatorExpression {
            op: '*',
            left: Identifier {
              name: 'n'
            },
            right: ApplyExpression {
              expr: Identifier {
                name: 'factorial'
              },
              args: OperatorExpression {
                op: '-',
                left: Identifier {
                  name: 'n'
                },
                right: NumericLiteral {
                  value: 1
                }
              }
            }
          }
        }]
      }
    }
  }
}

IdentifierPattern {
  name: 'factorial',
  init: undefined
}

Identifier {
  name: 'fix'
}

ApplyExpression {
  expr: FunctionExpression {
    params: IdentifierPattern {
      name: 'x',
      init: undefined
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'f'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'y',
          init: undefined
        },
        expr: ApplyExpression {
          expr: ApplyExpression {
            expr: Identifier {
              name: 'x'
            },
            args: Identifier {
              name: 'x'
            }
          },
          args: Identifier {
            name: 'y'
          }
        }
      }
    }
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'x',
      init: undefined
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'f'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'y',
          init: undefined
        },
        expr: ApplyExpression {
          expr: ApplyExpression {
            expr: Identifier {
              name: 'x'
            },
            args: Identifier {
              name: 'x'
            }
          },
          args: Identifier {
            name: 'y'
          }
        }
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'x',
    init: undefined
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'f'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'y',
        init: undefined
      },
      expr: ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'x'
          },
          args: Identifier {
            name: 'x'
          }
        },
        args: Identifier {
          name: 'y'
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'x',
    init: undefined
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'f'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'y',
        init: undefined
      },
      expr: ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'x'
          },
          args: Identifier {
            name: 'x'
          }
        },
        args: Identifier {
          name: 'y'
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

IdentifierPattern {
  name: 'factorial'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: NumericLiteral {
      value: 170
    }
  }
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: NumericLiteral {
    value: 170
  }
}

NumericLiteral {
  value: 170
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'factorial'
    },
    args: OperatorExpression {
      op: '-',
      left: Identifier {
        name: 'n'
      },
      right: NumericLiteral {
        value: 1
      }
    }
  }
}

Identifier {
  name: 'n'
}

ApplyExpression {
  expr: Identifier {
    name: 'factorial'
  },
  args: OperatorExpression {
    op: '-',
    left: Identifier {
      name: 'n'
    },
    right: NumericLiteral {
      value: 1
    }
  }
}

OperatorExpression {
  op: '-',
  left: Identifier {
    name: 'n'
  },
  right: NumericLiteral {
    value: 1
  }
}

Identifier {
  name: 'n'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'factorial'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'match'
      },
      args: Identifier {
        name: 'n'
      }
    },
    args: TupleExpression {
      elements: [FunctionExpression {
        params: NumericLiteralPattern {
          value: 0
        },
        expr: NumericLiteral {
          value: 1
        }
      }, FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: OperatorExpression {
          op: '*',
          left: Identifier {
            name: 'n'
          },
          right: ApplyExpression {
            expr: Identifier {
              name: 'factorial'
            },
            args: OperatorExpression {
              op: '-',
              left: Identifier {
                name: 'n'
              },
              right: NumericLiteral {
                value: 1
              }
            }
          }
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'match'
    },
    args: Identifier {
      name: 'n'
    }
  },
  args: TupleExpression {
    elements: [FunctionExpression {
      params: NumericLiteralPattern {
        value: 0
      },
      expr: NumericLiteral {
        value: 1
      }
    }, FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: ApplyExpression {
          expr: Identifier {
            name: 'factorial'
          },
          args: OperatorExpression {
            op: '-',
            left: Identifier {
              name: 'n'
            },
            right: NumericLiteral {
              value: 1
            }
          }
        }
      }
    }]
  }
}

TupleExpression {
  elements: [FunctionExpression {
    params: NumericLiteralPattern {
      value: 0
    },
    expr: NumericLiteral {
      value: 1
    }
  }, FunctionExpression {
    params: IdentifierPattern {
      name: 'n',
      init: undefined
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'factorial'
        },
        args: OperatorExpression {
          op: '-',
          left: Identifier {
            name: 'n'
          },
          right: NumericLiteral {
            value: 1
          }
        }
      }
    }
  }]
}

FunctionExpression {
  params: NumericLiteralPattern {
    value: 0
  },
  expr: NumericLiteral {
    value: 1
  }
}

NumericLiteralPattern {
  value: 0
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: OperatorExpression {
        op: '-',
        left: Identifier {
          name: 'n'
        },
        right: NumericLiteral {
          value: 1
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'match'
  },
  args: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'match'
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: ApplyExpression {
    expr: Identifier {
      name: 'let'
    },
    args: FunctionExpression {
      params: TuplePattern {
        elements: [IdentifierPattern {
          name: 'x',
          init: NumericLiteral {
            value: 2
          }
        }, IdentifierPattern {
          name: 'y',
          init: NumericLiteral {
            value: 3
          }
        }]
      },
      expr: OperatorExpression {
        op: '+',
        left: Identifier {
          name: 'x'
        },
        right: Identifier {
          name: 'y'
        }
      }
    }
  }
}

ApplyExpression {
  expr: Identifier {
    name: 'let'
  },
  args: FunctionExpression {
    params: TuplePattern {
      elements: [IdentifierPattern {
        name: 'x',
        init: NumericLiteral {
          value: 2
        }
      }, IdentifierPattern {
        name: 'y',
        init: NumericLiteral {
          value: 3
        }
      }]
    },
    expr: OperatorExpression {
      op: '+',
      left: Identifier {
        name: 'x'
      },
      right: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: TuplePattern {
    elements: [IdentifierPattern {
      name: 'x',
      init: NumericLiteral {
        value: 2
      }
    }, IdentifierPattern {
      name: 'y',
      init: NumericLiteral {
        value: 3
      }
    }]
  },
  expr: OperatorExpression {
    op: '+',
    left: Identifier {
      name: 'x'
    },
    right: Identifier {
      name: 'y'
    }
  }
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'x',
    init: NumericLiteral {
      value: 2
    }
  }, IdentifierPattern {
    name: 'y',
    init: NumericLiteral {
      value: 3
    }
  }]
}

IdentifierPattern {
  name: 'x',
  init: NumericLiteral {
    value: 2
  }
}

NumericLiteral {
  value: 2
}

IdentifierPattern {
  name: 'y',
  init: NumericLiteral {
    value: 3
  }
}

NumericLiteral {
  value: 3
}

Identifier {
  name: 'let'
}

OperatorExpression {
  op: '+',
  left: Identifier {
    name: 'x'
  },
  right: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'y'
}

Identifier {
  name: 'print'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'name'
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'input'
    },
    args: StringLiteral {
      value: 'Name?'
    }
  }
}

ApplyExpression {
  expr: Identifier {
    name: 'input'
  },
  args: StringLiteral {
    value: 'Name?'
  }
}

StringLiteral {
  value: 'Name?'
}

Identifier {
  name: 'input'
}

IdentifierPattern {
  name: 'name'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: TupleExpression {
    elements: [StringLiteral {
      value: 'hi'
    }, Identifier {
      name: 'name'
    }]
  }
}

TupleExpression {
  elements: [StringLiteral {
    value: 'hi'
  }, Identifier {
    name: 'name'
  }]
}

StringLiteral {
  value: 'hi'
}

Identifier {
  name: 'name'
}

Identifier {
  name: 'print'
}

PipeExpression {
  left: FunctionExpression {
    params: TuplePattern {
      elements: [NumericLiteralPattern {
        value: 0
      }, IdentifierPattern {
        name: 'x',
        init: undefined
      }]
    },
    expr: Identifier {
      name: 'x'
    }
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'getMatches'
    },
    args: TupleExpression {
      elements: [NumericLiteral {
        value: 0
      }, NumericLiteral {
        value: 1
      }]
    }
  }
}

FunctionExpression {
  params: TuplePattern {
    elements: [NumericLiteralPattern {
      value: 0
    }, IdentifierPattern {
      name: 'x',
      init: undefined
    }]
  },
  expr: Identifier {
    name: 'x'
  }
}

TuplePattern {
  elements: [NumericLiteralPattern {
    value: 0
  }, IdentifierPattern {
    name: 'x',
    init: undefined
  }]
}

NumericLiteralPattern {
  value: 0
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

TupleExpression {
  elements: [NumericLiteral {
    value: 0
  }, NumericLiteral {
    value: 1
  }]
}

NumericLiteral {
  value: 0
}

NumericLiteral {
  value: 1
}

Assignment {
  pattern: TuplePattern {
    elements: [IdentifierPattern {
      name: 'vecA'
    }, IdentifierPattern {
      name: 'vecB'
    }]
  },
  expr: TupleExpression {
    elements: [ApplyExpression {
      expr: Identifier {
        name: 'Vector'
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 1
        }, NumericLiteral {
          value: 2
        }]
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'Vector'
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 2
        }, NumericLiteral {
          value: 3
        }]
      }
    }]
  }
}

TupleExpression {
  elements: [ApplyExpression {
    expr: Identifier {
      name: 'Vector'
    },
    args: TupleExpression {
      elements: [NumericLiteral {
        value: 1
      }, NumericLiteral {
        value: 2
      }]
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'Vector'
    },
    args: TupleExpression {
      elements: [NumericLiteral {
        value: 2
      }, NumericLiteral {
        value: 3
      }]
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'Vector'
  },
  args: TupleExpression {
    elements: [NumericLiteral {
      value: 1
    }, NumericLiteral {
      value: 2
    }]
  }
}

TupleExpression {
  elements: [NumericLiteral {
    value: 1
  }, NumericLiteral {
    value: 2
  }]
}

NumericLiteral {
  value: 1
}

NumericLiteral {
  value: 2
}

ApplyExpression {
  expr: Identifier {
    name: 'Vector'
  },
  args: TupleExpression {
    elements: [NumericLiteral {
      value: 2
    }, NumericLiteral {
      value: 3
    }]
  }
}

TupleExpression {
  elements: [NumericLiteral {
    value: 2
  }, NumericLiteral {
    value: 3
  }]
}

NumericLiteral {
  value: 2
}

NumericLiteral {
  value: 3
}

Identifier {
  name: 'Vector'
}

Identifier {
  name: 'Vector'
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'vecA'
  }, IdentifierPattern {
    name: 'vecB'
  }]
}

IdentifierPattern {
  name: 'vecA'
}

IdentifierPattern {
  name: 'vecB'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: PipeExpression {
    left: PipeExpression {
      left: OperatorExpression {
        op: '+',
        left: Identifier {
          name: 'vecA'
        },
        right: Identifier {
          name: 'vecB'
        }
      },
      right: Identifier {
        name: 'length'
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'toFixed'
      },
      args: NumericLiteral {
        value: 3
      }
    }
  }
}

PipeExpression {
  left: PipeExpression {
    left: OperatorExpression {
      op: '+',
      left: Identifier {
        name: 'vecA'
      },
      right: Identifier {
        name: 'vecB'
      }
    },
    right: Identifier {
      name: 'length'
    }
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'toFixed'
    },
    args: NumericLiteral {
      value: 3
    }
  }
}

PipeExpression {
  left: OperatorExpression {
    op: '+',
    left: Identifier {
      name: 'vecA'
    },
    right: Identifier {
      name: 'vecB'
    }
  },
  right: Identifier {
    name: 'length'
  }
}

OperatorExpression {
  op: '+',
  left: Identifier {
    name: 'vecA'
  },
  right: Identifier {
    name: 'vecB'
  }
}

Identifier {
  name: 'vecA'
}

Identifier {
  name: 'vecB'
}

NumericLiteral {
  value: 3
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: PipeExpression {
    left: TupleExpression {
      elements: [RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 2
        }
      }, RangeExpression {
        from: StringLiteral {
          value: 'a'
        },
        to: StringLiteral {
          value: 'z'
        }
      }]
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'map'
      },
      args: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'a',
            init: undefined
          }, IdentifierPattern {
            name: 'b',
            init: undefined
          }]
        },
        expr: TupleExpression {
          elements: [Identifier {
            name: 'a'
          }, Identifier {
            name: 'b'
          }]
        }
      }
    }
  }
}

PipeExpression {
  left: TupleExpression {
    elements: [RangeExpression {
      from: NumericLiteral {
        value: 1
      },
      to: NumericLiteral {
        value: 2
      }
    }, RangeExpression {
      from: StringLiteral {
        value: 'a'
      },
      to: StringLiteral {
        value: 'z'
      }
    }]
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'map'
    },
    args: FunctionExpression {
      params: TuplePattern {
        elements: [IdentifierPattern {
          name: 'a',
          init: undefined
        }, IdentifierPattern {
          name: 'b',
          init: undefined
        }]
      },
      expr: TupleExpression {
        elements: [Identifier {
          name: 'a'
        }, Identifier {
          name: 'b'
        }]
      }
    }
  }
}

TupleExpression {
  elements: [RangeExpression {
    from: NumericLiteral {
      value: 1
    },
    to: NumericLiteral {
      value: 2
    }
  }, RangeExpression {
    from: StringLiteral {
      value: 'a'
    },
    to: StringLiteral {
      value: 'z'
    }
  }]
}

RangeExpression {
  from: NumericLiteral {
    value: 1
  },
  to: NumericLiteral {
    value: 2
  }
}

NumericLiteral {
  value: 1
}

NumericLiteral {
  value: 2
}

RangeExpression {
  from: StringLiteral {
    value: 'a'
  },
  to: StringLiteral {
    value: 'z'
  }
}

StringLiteral {
  value: 'a'
}

StringLiteral {
  value: 'z'
}

FunctionExpression {
  params: TuplePattern {
    elements: [IdentifierPattern {
      name: 'a',
      init: undefined
    }, IdentifierPattern {
      name: 'b',
      init: undefined
    }]
  },
  expr: TupleExpression {
    elements: [Identifier {
      name: 'a'
    }, Identifier {
      name: 'b'
    }]
  }
}

TuplePattern {
  elements: [IdentifierPattern {
    name: 'a',
    init: undefined
  }, IdentifierPattern {
    name: 'b',
    init: undefined
  }]
}

IdentifierPattern {
  name: 'a',
  init: undefined
}

IdentifierPattern {
  name: 'b',
  init: undefined
}

TupleExpression {
  elements: [Identifier {
    name: 'a'
  }, Identifier {
    name: 'b'
  }]
}

Identifier {
  name: 'a'
}

Identifier {
  name: 'b'
}

TupleExpression {
  elements: [Identifier {
    name: 'a'
  }, Identifier {
    name: 'b'
  }]
}

Identifier {
  name: 'a'
}

Identifier {
  name: 'b'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: PipeExpression {
    left: RangeExpression {
      from: NumericLiteral {
        value: 1
      },
      to: NumericLiteral {
        value: 3
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'map'
      },
      args: Identifier {
        name: 'even'
      }
    }
  }
}

PipeExpression {
  left: RangeExpression {
    from: NumericLiteral {
      value: 1
    },
    to: NumericLiteral {
      value: 3
    }
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'map'
    },
    args: Identifier {
      name: 'even'
    }
  }
}

RangeExpression {
  from: NumericLiteral {
    value: 1
  },
  to: NumericLiteral {
    value: 3
  }
}

NumericLiteral {
  value: 1
}

NumericLiteral {
  value: 3
}

Identifier {
  name: 'even'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: PipeExpression {
    left: RangeExpression {
      from: NumericLiteral {
        value: 1
      },
      to: NumericLiteral {
        value: 5
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'map'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'n',
          init: undefined
        },
        expr: Block {
          statements: [Assignment {
            pattern: IdentifierPattern {
              name: 'x'
            },
            expr: OperatorExpression {
              op: '*',
              left: Identifier {
                name: 'n'
              },
              right: Identifier {
                name: 'n'
              }
            }
          }, Identifier {
            name: 'x'
          }]
        }
      }
    }
  }
}

PipeExpression {
  left: RangeExpression {
    from: NumericLiteral {
      value: 1
    },
    to: NumericLiteral {
      value: 5
    }
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'map'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'n',
        init: undefined
      },
      expr: Block {
        statements: [Assignment {
          pattern: IdentifierPattern {
            name: 'x'
          },
          expr: OperatorExpression {
            op: '*',
            left: Identifier {
              name: 'n'
            },
            right: Identifier {
              name: 'n'
            }
          }
        }, Identifier {
          name: 'x'
        }]
      }
    }
  }
}

RangeExpression {
  from: NumericLiteral {
    value: 1
  },
  to: NumericLiteral {
    value: 5
  }
}

NumericLiteral {
  value: 1
}

NumericLiteral {
  value: 5
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'n',
    init: undefined
  },
  expr: Block {
    statements: [Assignment {
      pattern: IdentifierPattern {
        name: 'x'
      },
      expr: OperatorExpression {
        op: '*',
        left: Identifier {
          name: 'n'
        },
        right: Identifier {
          name: 'n'
        }
      }
    }, Identifier {
      name: 'x'
    }]
  }
}

IdentifierPattern {
  name: 'n',
  init: undefined
}

Block {
  statements: [Assignment {
    pattern: IdentifierPattern {
      name: 'x'
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }, Identifier {
    name: 'x'
  }]
}

Block {
  statements: [Assignment {
    pattern: IdentifierPattern {
      name: 'x'
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }, Identifier {
    name: 'x'
  }]
}

Block {
  statements: [Assignment {
    pattern: IdentifierPattern {
      name: 'x'
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }, Identifier {
    name: 'x'
  }]
}

Block {
  statements: [Assignment {
    pattern: IdentifierPattern {
      name: 'x'
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }, Identifier {
    name: 'x'
  }]
}

Block {
  statements: [Assignment {
    pattern: IdentifierPattern {
      name: 'x'
    },
    expr: OperatorExpression {
      op: '*',
      left: Identifier {
        name: 'n'
      },
      right: Identifier {
        name: 'n'
      }
    }
  }, Identifier {
    name: 'x'
  }]
}

Assignment {
  pattern: IdentifierPattern {
    name: 'x'
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'x'
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'x'
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'x'
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Assignment {
  pattern: IdentifierPattern {
    name: 'x'
  },
  expr: OperatorExpression {
    op: '*',
    left: Identifier {
      name: 'n'
    },
    right: Identifier {
      name: 'n'
    }
  }
}

OperatorExpression {
  op: '*',
  left: Identifier {
    name: 'n'
  },
  right: Identifier {
    name: 'n'
  }
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

Identifier {
  name: 'n'
}

IdentifierPattern {
  name: 'x'
}

IdentifierPattern {
  name: 'x'
}

IdentifierPattern {
  name: 'x'
}

IdentifierPattern {
  name: 'x'
}

IdentifierPattern {
  name: 'x'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: PipeExpression {
    left: RangeExpression {
      from: NumericLiteral {
        value: 1
      },
      to: NumericLiteral {
        value: 3
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'map'
      },
      args: AstLiteral {
        value: Identifier {
          name: 'toString'
        }
      }
    }
  }
}

PipeExpression {
  left: RangeExpression {
    from: NumericLiteral {
      value: 1
    },
    to: NumericLiteral {
      value: 3
    }
  },
  right: ApplyExpression {
    expr: Identifier {
      name: 'map'
    },
    args: AstLiteral {
      value: Identifier {
        name: 'toString'
      }
    }
  }
}

RangeExpression {
  from: NumericLiteral {
    value: 1
  },
  to: NumericLiteral {
    value: 3
  }
}

NumericLiteral {
  value: 1
}

NumericLiteral {
  value: 3
}

AstLiteral {
  value: Identifier {
    name: 'toString'
  }
}

Identifier {
  name: 'print'
}

TupleExpression {
  elements: [ApplyExpression {
    expr: Identifier {
      name: 'fetch'
    },
    args: StringLiteral {
      value: 'https://google.com'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'fetch'
    },
    args: StringLiteral {
      value: 'https://google.jp'
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'fetch'
  },
  args: StringLiteral {
    value: 'https://google.com'
  }
}

StringLiteral {
  value: 'https://google.com'
}

ApplyExpression {
  expr: Identifier {
    name: 'fetch'
  },
  args: StringLiteral {
    value: 'https://google.jp'
  }
}

StringLiteral {
  value: 'https://google.jp'
}

Identifier {
  name: 'fetch'
}

Identifier {
  name: 'fetch'
}

ApplyExpression {
  expr: Identifier {
    name: 'spawn'
  },
  args: ApplyExpression {
    expr: Identifier {
      name: 'fix'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'loop',
        init: undefined
      },
      expr: FunctionExpression {
        params: TuplePattern {
          elements: []
        },
        expr: Block {
          statements: [ApplyExpression {
            expr: Identifier {
              name: 'sleep'
            },
            args: NumericLiteral {
              value: 1
            }
          }, ApplyExpression {
            expr: Identifier {
              name: 'print'
            },
            args: StringLiteral {
              value: 'hi'
            }
          }, ApplyExpression {
            expr: Identifier {
              name: 'loop'
            },
            args: TupleExpression {
              elements: []
            }
          }]
        }
      }
    }
  }
}

ApplyExpression {
  expr: Identifier {
    name: 'fix'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'loop',
      init: undefined
    },
    expr: FunctionExpression {
      params: TuplePattern {
        elements: []
      },
      expr: Block {
        statements: [ApplyExpression {
          expr: Identifier {
            name: 'sleep'
          },
          args: NumericLiteral {
            value: 1
          }
        }, ApplyExpression {
          expr: Identifier {
            name: 'print'
          },
          args: StringLiteral {
            value: 'hi'
          }
        }, ApplyExpression {
          expr: Identifier {
            name: 'loop'
          },
          args: TupleExpression {
            elements: []
          }
        }]
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'loop',
    init: undefined
  },
  expr: FunctionExpression {
    params: TuplePattern {
      elements: []
    },
    expr: Block {
      statements: [ApplyExpression {
        expr: Identifier {
          name: 'sleep'
        },
        args: NumericLiteral {
          value: 1
        }
      }, ApplyExpression {
        expr: Identifier {
          name: 'print'
        },
        args: StringLiteral {
          value: 'hi'
        }
      }, ApplyExpression {
        expr: Identifier {
          name: 'loop'
        },
        args: TupleExpression {
          elements: []
        }
      }]
    }
  }
}

IdentifierPattern {
  name: 'loop',
  init: undefined
}

Identifier {
  name: 'fix'
}

ApplyExpression {
  expr: FunctionExpression {
    params: IdentifierPattern {
      name: 'x',
      init: undefined
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'f'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'y',
          init: undefined
        },
        expr: ApplyExpression {
          expr: ApplyExpression {
            expr: Identifier {
              name: 'x'
            },
            args: Identifier {
              name: 'x'
            }
          },
          args: Identifier {
            name: 'y'
          }
        }
      }
    }
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'x',
      init: undefined
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'f'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'y',
          init: undefined
        },
        expr: ApplyExpression {
          expr: ApplyExpression {
            expr: Identifier {
              name: 'x'
            },
            args: Identifier {
              name: 'x'
            }
          },
          args: Identifier {
            name: 'y'
          }
        }
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'x',
    init: undefined
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'f'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'y',
        init: undefined
      },
      expr: ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'x'
          },
          args: Identifier {
            name: 'x'
          }
        },
        args: Identifier {
          name: 'y'
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'x',
    init: undefined
  },
  expr: ApplyExpression {
    expr: Identifier {
      name: 'f'
    },
    args: FunctionExpression {
      params: IdentifierPattern {
        name: 'y',
        init: undefined
      },
      expr: ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'x'
          },
          args: Identifier {
            name: 'x'
          }
        },
        args: Identifier {
          name: 'y'
        }
      }
    }
  }
}

IdentifierPattern {
  name: 'x',
  init: undefined
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: TuplePattern {
    elements: []
  },
  expr: Block {
    statements: [ApplyExpression {
      expr: Identifier {
        name: 'sleep'
      },
      args: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'print'
      },
      args: StringLiteral {
        value: 'hi'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'loop'
      },
      args: TupleExpression {
        elements: []
      }
    }]
  }
}

TuplePattern {
  elements: []
}

Identifier {
  name: 'spawn'
}

Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'sleep'
    },
    args: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'hi'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'loop'
    },
    args: TupleExpression {
      elements: []
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'sleep'
  },
  args: NumericLiteral {
    value: 1
  }
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'sleep'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: StringLiteral {
    value: 'done'
  }
}

StringLiteral {
  value: 'done'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: StringLiteral {
    value: 'hi'
  }
}

StringLiteral {
  value: 'hi'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'loop'
  },
  args: TupleExpression {
    elements: []
  }
}

TupleExpression {
  elements: []
}

Identifier {
  name: 'loop'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: TuplePattern {
    elements: []
  },
  expr: Block {
    statements: [ApplyExpression {
      expr: Identifier {
        name: 'sleep'
      },
      args: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'print'
      },
      args: StringLiteral {
        value: 'hi'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'loop'
      },
      args: TupleExpression {
        elements: []
      }
    }]
  }
}

TuplePattern {
  elements: []
}

Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'sleep'
    },
    args: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'hi'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'loop'
    },
    args: TupleExpression {
      elements: []
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'sleep'
  },
  args: NumericLiteral {
    value: 1
  }
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'sleep'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: StringLiteral {
    value: 'hi'
  }
}

StringLiteral {
  value: 'hi'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'loop'
  },
  args: TupleExpression {
    elements: []
  }
}

TupleExpression {
  elements: []
}

Identifier {
  name: 'loop'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: TuplePattern {
    elements: []
  },
  expr: Block {
    statements: [ApplyExpression {
      expr: Identifier {
        name: 'sleep'
      },
      args: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'print'
      },
      args: StringLiteral {
        value: 'hi'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'loop'
      },
      args: TupleExpression {
        elements: []
      }
    }]
  }
}

TuplePattern {
  elements: []
}

Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'sleep'
    },
    args: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'hi'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'loop'
    },
    args: TupleExpression {
      elements: []
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'sleep'
  },
  args: NumericLiteral {
    value: 1
  }
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'sleep'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: StringLiteral {
    value: 'hi'
  }
}

StringLiteral {
  value: 'hi'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'loop'
  },
  args: TupleExpression {
    elements: []
  }
}

TupleExpression {
  elements: []
}

Identifier {
  name: 'loop'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: TuplePattern {
    elements: []
  },
  expr: Block {
    statements: [ApplyExpression {
      expr: Identifier {
        name: 'sleep'
      },
      args: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'print'
      },
      args: StringLiteral {
        value: 'hi'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'loop'
      },
      args: TupleExpression {
        elements: []
      }
    }]
  }
}

TuplePattern {
  elements: []
}

Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'sleep'
    },
    args: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'hi'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'loop'
    },
    args: TupleExpression {
      elements: []
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'sleep'
  },
  args: NumericLiteral {
    value: 1
  }
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'sleep'
}

ApplyExpression {
  expr: Identifier {
    name: 'print'
  },
  args: StringLiteral {
    value: 'hi'
  }
}

StringLiteral {
  value: 'hi'
}

Identifier {
  name: 'print'
}

ApplyExpression {
  expr: Identifier {
    name: 'loop'
  },
  args: TupleExpression {
    elements: []
  }
}

TupleExpression {
  elements: []
}

Identifier {
  name: 'loop'
}

ApplyExpression {
  expr: ApplyExpression {
    expr: Identifier {
      name: 'x'
    },
    args: Identifier {
      name: 'x'
    }
  },
  args: Identifier {
    name: 'y'
  }
}

Identifier {
  name: 'y'
}

ApplyExpression {
  expr: Identifier {
    name: 'x'
  },
  args: Identifier {
    name: 'x'
  }
}

Identifier {
  name: 'x'
}

Identifier {
  name: 'x'
}

ApplyExpression {
  expr: Identifier {
    name: 'f'
  },
  args: FunctionExpression {
    params: IdentifierPattern {
      name: 'y',
      init: undefined
    },
    expr: ApplyExpression {
      expr: ApplyExpression {
        expr: Identifier {
          name: 'x'
        },
        args: Identifier {
          name: 'x'
        }
      },
      args: Identifier {
        name: 'y'
      }
    }
  }
}

FunctionExpression {
  params: IdentifierPattern {
    name: 'y',
    init: undefined
  },
  expr: ApplyExpression {
    expr: ApplyExpression {
      expr: Identifier {
        name: 'x'
      },
      args: Identifier {
        name: 'x'
      }
    },
    args: Identifier {
      name: 'y'
    }
  }
}

IdentifierPattern {
  name: 'y',
  init: undefined
}

Identifier {
  name: 'f'
}

FunctionExpression {
  params: TuplePattern {
    elements: []
  },
  expr: Block {
    statements: [ApplyExpression {
      expr: Identifier {
        name: 'sleep'
      },
      args: NumericLiteral {
        value: 1
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'print'
      },
      args: StringLiteral {
        value: 'hi'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'loop'
      },
      args: TupleExpression {
        elements: []
      }
    }]
  }
}

TuplePattern {
  elements: []
}

Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'sleep'
    },
    args: NumericLiteral {
      value: 1
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'hi'
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'loop'
    },
    args: TupleExpression {
      elements: []
    }
  }]
}

ApplyExpression {
  expr: Identifier {
    name: 'sleep'
  },
  args: NumericLiteral {
    value: 1
  }
}

NumericLiteral {
  value: 1
}

Identifier {
  name: 'sleep'
}

