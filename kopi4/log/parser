Block {
  statements: [ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: TupleExpression {
      elements: [ApplyExpression {
        expr: FunctionExpression {
          params: TuplePattern {
            elements: [IdentifierPattern {
              name: 'a',
              init: undefined
            }, IdentifierPattern {
              name: 'b',
              init: undefined
            }]
          },
          expr: OperatorExpression {
            op: '+',
            left: Identifier {
              name: 'a'
            },
            right: Identifier {
              name: 'b'
            }
          }
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 2
          }, NumericLiteral {
            value: 3
          }]
        }
      }, OperatorExpression {
        op: '+',
        left: OperatorExpression {
          op: '*',
          left: NumericLiteral {
            value: 2
          },
          right: OperatorExpression {
            op: '+',
            left: NumericLiteral {
              value: 3
            },
            right: NumericLiteral {
              value: 4
            }
          }
        },
        right: NumericLiteral {
          value: 1
        }
      }, ApplyExpression {
        expr: ApplyExpression {
          expr: Identifier {
            name: 'match'
          },
          args: NumericLiteral {
            value: 5
          }
        },
        args: TupleExpression {
          elements: [FunctionExpression {
            params: NumericLiteralPattern {
              value: 0
            },
            expr: NumericLiteral {
              value: 1
            }
          }, FunctionExpression {
            params: IdentifierPattern {
              name: 'n',
              init: undefined
            },
            expr: OperatorExpression {
              op: '*',
              left: Identifier {
                name: 'n'
              },
              right: Identifier {
                name: 'n'
              }
            }
          }]
        }
      }]
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'x',
            init: undefined
          }, IdentifierPattern {
            name: 'k',
            init: undefined
          }]
        },
        expr: ApplyExpression {
          expr: FunctionExpression {
            params: TuplePattern {
              elements: [IdentifierPattern {
                name: 'x',
                init: undefined
              }, IdentifierPattern {
                name: 'k',
                init: undefined
              }]
            },
            expr: ApplyExpression {
              expr: Identifier {
                name: 'k'
              },
              args: OperatorExpression {
                op: '+',
                left: Identifier {
                  name: 'x'
                },
                right: NumericLiteral {
                  value: 1
                }
              }
            }
          },
          args: TupleExpression {
            elements: [OperatorExpression {
              op: '+',
              left: Identifier {
                name: 'x'
              },
              right: Identifier {
                name: 'x'
              }
            }, Identifier {
              name: 'k'
            }]
          }
        }
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 5
        }, FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: Identifier {
            name: 'x'
          }
        }]
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'fix'
    },
    expr: FunctionExpression {
      params: IdentifierPattern {
        name: 'f',
        init: undefined
      },
      expr: ApplyExpression {
        expr: FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: ApplyExpression {
            expr: Identifier {
              name: 'f'
            },
            args: FunctionExpression {
              params: IdentifierPattern {
                name: 'y',
                init: undefined
              },
              expr: ApplyExpression {
                expr: ApplyExpression {
                  expr: Identifier {
                    name: 'x'
                  },
                  args: Identifier {
                    name: 'x'
                  }
                },
                args: Identifier {
                  name: 'y'
                }
              }
            }
          }
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'x',
            init: undefined
          },
          expr: ApplyExpression {
            expr: Identifier {
              name: 'f'
            },
            args: FunctionExpression {
              params: IdentifierPattern {
                name: 'y',
                init: undefined
              },
              expr: ApplyExpression {
                expr: ApplyExpression {
                  expr: Identifier {
                    name: 'x'
                  },
                  args: Identifier {
                    name: 'x'
                  }
                },
                args: Identifier {
                  name: 'y'
                }
              }
            }
          }
        }
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'factorial'
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'fix'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'factorial',
          init: undefined
        },
        expr: FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: ApplyExpression {
            expr: ApplyExpression {
              expr: Identifier {
                name: 'match'
              },
              args: Identifier {
                name: 'n'
              }
            },
            args: TupleExpression {
              elements: [FunctionExpression {
                params: NumericLiteralPattern {
                  value: 0
                },
                expr: NumericLiteral {
                  value: 1
                }
              }, FunctionExpression {
                params: IdentifierPattern {
                  name: 'n',
                  init: undefined
                },
                expr: OperatorExpression {
                  op: '*',
                  left: Identifier {
                    name: 'n'
                  },
                  right: ApplyExpression {
                    expr: Identifier {
                      name: 'factorial'
                    },
                    args: OperatorExpression {
                      op: '-',
                      left: Identifier {
                        name: 'n'
                      },
                      right: NumericLiteral {
                        value: 1
                      }
                    }
                  }
                }
              }]
            }
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'factorial'
      },
      args: NumericLiteral {
        value: 170
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'let'
      },
      args: FunctionExpression {
        params: TuplePattern {
          elements: [IdentifierPattern {
            name: 'x',
            init: NumericLiteral {
              value: 2
            }
          }, IdentifierPattern {
            name: 'y',
            init: NumericLiteral {
              value: 3
            }
          }]
        },
        expr: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'x'
          },
          right: Identifier {
            name: 'y'
          }
        }
      }
    }
  }, Assignment {
    pattern: IdentifierPattern {
      name: 'name'
    },
    expr: ApplyExpression {
      expr: Identifier {
        name: 'input'
      },
      args: StringLiteral {
        value: 'Name?'
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: TupleExpression {
      elements: [StringLiteral {
        value: 'hi'
      }, Identifier {
        name: 'name'
      }]
    }
  }, PipeExpression {
    left: FunctionExpression {
      params: TuplePattern {
        elements: [NumericLiteralPattern {
          value: 0
        }, IdentifierPattern {
          name: 'x',
          init: undefined
        }]
      },
      expr: Identifier {
        name: 'x'
      }
    },
    right: ApplyExpression {
      expr: Identifier {
        name: 'getMatches'
      },
      args: TupleExpression {
        elements: [NumericLiteral {
          value: 0
        }, NumericLiteral {
          value: 1
        }]
      }
    }
  }, Assignment {
    pattern: TuplePattern {
      elements: [IdentifierPattern {
        name: 'vecA'
      }, IdentifierPattern {
        name: 'vecB'
      }]
    },
    expr: TupleExpression {
      elements: [ApplyExpression {
        expr: Identifier {
          name: 'Vector'
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 1
          }, NumericLiteral {
            value: 2
          }]
        }
      }, ApplyExpression {
        expr: Identifier {
          name: 'Vector'
        },
        args: TupleExpression {
          elements: [NumericLiteral {
            value: 2
          }, NumericLiteral {
            value: 3
          }]
        }
      }]
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: PipeExpression {
        left: OperatorExpression {
          op: '+',
          left: Identifier {
            name: 'vecA'
          },
          right: Identifier {
            name: 'vecB'
          }
        },
        right: Identifier {
          name: 'length'
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'toFixed'
        },
        args: NumericLiteral {
          value: 3
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: TupleExpression {
        elements: [RangeExpression {
          from: NumericLiteral {
            value: 1
          },
          to: NumericLiteral {
            value: 2
          }
        }, RangeExpression {
          from: StringLiteral {
            value: 'a'
          },
          to: StringLiteral {
            value: 'z'
          }
        }]
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: FunctionExpression {
          params: TuplePattern {
            elements: [IdentifierPattern {
              name: 'a',
              init: undefined
            }, IdentifierPattern {
              name: 'b',
              init: undefined
            }]
          },
          expr: TupleExpression {
            elements: [Identifier {
              name: 'a'
            }, Identifier {
              name: 'b'
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 3
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: Identifier {
          name: 'even'
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 5
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: FunctionExpression {
          params: IdentifierPattern {
            name: 'n',
            init: undefined
          },
          expr: Block {
            statements: [Assignment {
              pattern: IdentifierPattern {
                name: 'x'
              },
              expr: OperatorExpression {
                op: '*',
                left: Identifier {
                  name: 'n'
                },
                right: Identifier {
                  name: 'n'
                }
              }
            }, Identifier {
              name: 'x'
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: PipeExpression {
      left: RangeExpression {
        from: NumericLiteral {
          value: 1
        },
        to: NumericLiteral {
          value: 3
        }
      },
      right: ApplyExpression {
        expr: Identifier {
          name: 'map'
        },
        args: AstLiteral {
          value: Identifier {
            name: 'toString'
          }
        }
      }
    }
  }, TupleExpression {
    elements: [ApplyExpression {
      expr: Identifier {
        name: 'fetch'
      },
      args: StringLiteral {
        value: 'https://google.com'
      }
    }, ApplyExpression {
      expr: Identifier {
        name: 'fetch'
      },
      args: StringLiteral {
        value: 'https://google.jp'
      }
    }]
  }, ApplyExpression {
    expr: Identifier {
      name: 'spawn'
    },
    args: ApplyExpression {
      expr: Identifier {
        name: 'fix'
      },
      args: FunctionExpression {
        params: IdentifierPattern {
          name: 'loop',
          init: undefined
        },
        expr: FunctionExpression {
          params: TuplePattern {
            elements: []
          },
          expr: Block {
            statements: [ApplyExpression {
              expr: Identifier {
                name: 'sleep'
              },
              args: NumericLiteral {
                value: 1
              }
            }, ApplyExpression {
              expr: Identifier {
                name: 'print'
              },
              args: StringLiteral {
                value: 'hi'
              }
            }, ApplyExpression {
              expr: Identifier {
                name: 'loop'
              },
              args: TupleExpression {
                elements: []
              }
            }]
          }
        }
      }
    }
  }, ApplyExpression {
    expr: Identifier {
      name: 'print'
    },
    args: StringLiteral {
      value: 'done'
    }
  }]
}

