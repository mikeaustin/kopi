# Tuples

()

1, 2

2.5, foo

a, b = b, a

# Arrays

[]

[(1, 2), (3, 4)]

[a, b] = [b, a]

# Math

(abs x) + (abs y)

a * (b + c) / 3

# Functions

1 + 2 > 3 + 4

() => 1, 2

f => x => f x

add a, b = a + b

(a, b => a, b) 1, 2

a, (b, c) => a, (b, c)

xs | reduce (z, a) => z + 1, 0

"a,b,c" | split "," | reverse | join ","

print 1 + 2, 3 + 4

# Blocks

xs | map x => do
  print xs
  foo bar
end

employeeNames = ["Smith, John", "Johnson, Lisa", "Laner, Rob"]
employeeNames | sort (a, b) => a < b | map (name) => do
  name | split "," | map (name) => (name | strip) | reverse | join " "
end

employeeNames | sort (a, b => a < b) | map (name) => do
  name | split "," | map (name => name | strip) | reverse | join " "
end

# Other

1..10, "a".."z" | zip (z, a) => "{a}: {b}"

1..5 | flatMap i => (i..5 | map j => i + j)

"a b b b c c" | reduce (map, [key, value]) => do
  map | update key, 0, (value) => value + 1
end, []
